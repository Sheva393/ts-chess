{"ast":null,"code":"import { Cell } from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { King } from \"./figures/King\";\nimport { Knight } from \"./figures/Knight\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Queen } from \"./figures/Queen\";\nexport class Board {\n  constructor() {\n    this.cells = [];\n  }\n\n  initCells() {\n    for (let i = 0; i < 8; i++) {\n      const row = [];\n\n      for (let j = 0; j < 8; j++) {\n        if ((i + j) % 2 !== 0) {\n          row.push(new Cell(this, j, i, Colors.BLACK, null)); // Black\n        } else {\n          row.push(new Cell(this, j, i, Colors.WHITE, null)); // White\n        }\n      }\n\n      this.cells.push(row);\n    }\n  }\n\n  getCell(x, y) {\n    return this.cells[y][x];\n  }\n\n  addPawns() {\n    for (let i = 0; i < 8; i++) {\n      new Pawn(Colors.BLACK, this.getCell(i, 1));\n      new Pawn(Colors.WHITE, this.getCell(i, 6));\n    }\n  }\n\n  addKings() {\n    new King(Colors.BLACK, this.getCell(4, 0));\n    new King(Colors.WHITE, this.getCell(4, 7));\n  }\n\n  addQueens() {\n    new Queen(Colors.BLACK, this.getCell(3, 0));\n    new Queen(Colors.WHITE, this.getCell(3, 7));\n  }\n\n  addBishops() {\n    new Bishop(Colors.BLACK, this.getCell(2, 0));\n    new Bishop(Colors.BLACK, this.getCell(5, 0));\n    new Bishop(Colors.WHITE, this.getCell(2, 7));\n    new Bishop(Colors.WHITE, this.getCell(5, 7));\n  }\n\n  addKnights() {\n    new Knight(Colors.BLACK, this.getCell(3, 0));\n    new Knight(Colors.WHITE, this.getCell(3, 7));\n  }\n\n  addRooks() {}\n\n  addFigures() {\n    this.addPawns();\n    this.addKings();\n    this.addQueens();\n    this.addBishops();\n    this.addKnights();\n    this.addRooks();\n  }\n\n}","map":{"version":3,"sources":["/Users/vlad/Documents/ ts-chess/src/models/Board.ts"],"names":["Cell","Colors","Bishop","King","Knight","Pawn","Queen","Board","cells","initCells","i","row","j","push","BLACK","WHITE","getCell","x","y","addPawns","addKings","addQueens","addBishops","addKnights","addRooks","addFigures"],"mappings":"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","sourcesContent":["import { Cell } from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { King } from \"./figures/King\";\nimport { Knight } from \"./figures/Knight\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Queen } from \"./figures/Queen\";\n\nexport class Board {\n    cells : Cell[][] = []\n\n\n    public initCells(){\n        for(let i = 0; i<8 ;i++){\n            const row: Cell[] = []\n            for (let j = 0;j<8; j++){\n                if((i+j)%2 !== 0){\n                    row.push(new Cell(this,j,i,Colors.BLACK, null)) // Black\n                } else {\n                    row.push(new Cell(this,j,i,Colors.WHITE, null)) // White\n                }\n            }\n            this.cells.push(row)\n        }\n    }\n\n    public getCell(x:number,y:number){\n        return this.cells[y][x]\n    }\n\n    private addPawns(){\n        for (let i=0; i< 8;i++){\n            new Pawn(Colors.BLACK , this.getCell(i,1))\n            new Pawn(Colors.WHITE , this.getCell(i,6))\n        }\n    }\n\n    private addKings(){\n         new King(Colors.BLACK , this.getCell(4,0))\n         new King(Colors.WHITE , this.getCell(4,7))\n    }\n    private addQueens(){\n        new Queen(Colors.BLACK , this.getCell(3,0))\n        new Queen(Colors.WHITE , this.getCell(3,7))\n    }\n\n    private addBishops(){\n        new Bishop(Colors.BLACK , this.getCell(2,0))\n        new Bishop(Colors.BLACK , this.getCell(5,0))\n        new Bishop(Colors.WHITE , this.getCell(2,7))\n        new Bishop(Colors.WHITE , this.getCell(5,7))\n    }\n\n    private addKnights(){\n        new Knight(Colors.BLACK , this.getCell(3,0))\n        new Knight(Colors.WHITE , this.getCell(3,7))\n    }\n    private addRooks(){\n\n    }\n\n    public addFigures(){\n      this.addPawns()\n      this.addKings()\n      this.addQueens()\n      this.addBishops()\n      this.addKnights()\n      this.addRooks()\n    }\n}"]},"metadata":{},"sourceType":"module"}